vue基础
    el挂载点：
        vue实例的作用范围：
            el命中的元素内部。
        是否可以使用其他选择器
            可以使用css的所有选择器，建议使用id选择器
        是否可设置其他dom元素
            可以设置任何双标签的dom，HTML和body不支持挂载
    data数据对象
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="X-UA-Compatible" content="ie=edge">
            <title>vue</title>
        </head>
        <body>
            <div id="app">
                {{message}}
                <h2>
                    {{school.name}}
                    {{school.phone}}
                </h2>
                <ul>
                    <li>{{campus[0]}}</li>
                    <li>{{campus[1]}}</li>
                    <li>{{campus[2]}}</li>
                </ul>
            </div>
            <!-- 开发环境版本，包含了有帮助的命令行警告 -->
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script>
            var app=new Vue({
                el:"#app",
                data:{
                    message:"hello vue",
                    school:{
                        name:"vue",
                        phone:"666-88002-20"  
                    },
                    campus:["北京","上海","广州"]

                }
            })
        </script>
        </body>
        </html>

    本地应用
        内容绑定，事件绑定
            v-text
                设置标签的文本值（textContent)
                    {{message+"字符串拼接！"}}
                    <h1 v-text="message+'!!字符串拼接！!'"></h1>
            v-html
                设置标签的innerHTML
                    <p v-html="content"></p>
                    <p v-html="coon"></p>

                     content:"暨南大学",
                    coon:"<a href='https://www.bilibili.com/video/av75420619?p=9'>暨南大学</a>",
            v-on:
                为元素绑定事件
                    <input type="button" value="事件绑定" v-on:click="click1">
                    <input type="button" value="事件绑定" v-on:mouseenter="click1">
                    <input type="button" value="事件绑定" @dblclick="click1">
                    <input type="button" value="改变学校" @click="changecontent">
                    methods:{
                        click1:function(){
                            alert("VUE单击事件")
                        },
                        changecontent:function(){
                            console.dir(this.content);
                            this.content+="+JNDX+";
                        }
                    }

        显示切换，属性绑定
            v-show
                根据表达式的真假来切换元素的显示和隐藏（display）
                <img src="/png/BIGpic228.jpg" v-show="isShow" alt="">
                <input type="text" placeholder="输入年龄大小来判断是否达到图片显示年龄：" width="200px" >
                <img src="/png/（最终完成）九尾王者皮肤.jpg" v-show="age>=18" alt="">
            v-if
                根据表达式的真假来切换显示元素的状态（他操纵的是dom元素,移除或者添加dom节点）
                <div id="app">
                    <p v-if="true">11</p>
                    <p v-if="isShow">11</p>
                    <p v-if="表达式">11</p>
                </div>
            v-bind
                设置元素的属性
                    v-bind:属性名=表达式
                    简写  :属性名=表达式  (省略v-bind)
                    <div id="app">
                        <img src="地址">
                        <img v-bind:src="imgsrc">
                        <img v-bind:title:"imgtitle+'!!!'">
                        <!-- 三元表达式形式控制元素的类名添加与移除 -->
                        <img v-bind:class="isActive?'active':''">
                        <!-- 对象形式控制元素的类名添加与移除（active这个类名是否生效取决于isactive的值）  更为常用 -->
                        <img v-bind:class="{active:isActive}">
                    </div>

                    data:{
                        imgsrc:"图片地址",
                        imgtitle:"balabala"
                        isActive:false
                    }
        列表循环，表单元素绑定
            v-for
                根据数据生成列表结构
                    <div id="app">
                        <ul>
                            <li v-for="item in arr" v-bind:title="item">
                                {{item}}
                            </li>
                            <li v-for="(item,index) in arr">
                                {{index}}.{{item}}
                            </li>
                            <li v-for="(item,index) in objArr">
                                {{item.name}}
                            </li>
                        </ul>
                    </div>

                    var app=new Vue({
                        el:"#app",
                        data:{
                            arr:[1,2,3,4],
                            objArr:[
                                {name:"小黑"},
                                {name:"大花"}
                            ]
                        }

                    })
            v-on补充
                传递自定义参数，事件修饰符
                    <div id="app">
                        <input type="button" @click="doit(p1,p2)"/>
                        <input type="button" @keyup.enter="sayhi"/>
                    </div>

                    var app=new Vue({
                        el:"#app",
                        data:{
                            
                        }
                        methods:{
                            doit:function(p1,p2){
                                alert(p1,p2);
                            }
                            sayhi:function(){
                                alert("你好啊")
                            }
                        }

                    })
                事件修饰符
                    在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。

                    为了解决这个问题，Vue.js 为 v-on 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的。

                    .stop
                    .prevent
                    .capture
                    .self
                    .once
                    .passive
                    <!-- 阻止单击事件继续传播 -->
                    <a v-on:click.stop="doThis"></a>

                    <!-- 提交事件不再重载页面 -->
                    <form v-on:submit.prevent="onSubmit"></form>

                    <!-- 修饰符可以串联 -->
                    <a v-on:click.stop.prevent="doThat"></a>

                    <!-- 只有修饰符 -->
                    <form v-on:submit.prevent></form>

                    <!-- 添加事件监听器时使用事件捕获模式 -->
                    <!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 -->
                    <div v-on:click.capture="doThis">...</div>

                    <!-- 只当在 event.target 是当前元素自身时触发处理函数 -->
                    <!-- 即事件不是从内部元素触发的 -->
                    <div v-on:click.self="doThat">...</div>
                    使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。

                2.1.4 新增

                    <!-- 点击事件将只会触发一次 -->
                    <a v-on:click.once="doThis"></a>
                    不像其它只能对原生的 DOM 事件起作用的修饰符，.once 修饰符还能被用到自定义的组件事件上。如果你还没有阅读关于组件的文档，现在大可不必担心。

                2.3.0 新增

                    Vue 还对应 addEventListener 中的 passive 选项提供了 .passive 修饰符。

                    <!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 -->
                    <!-- 而不会等待 `onScroll` 完成  -->
                    <!-- 这其中包含 `event.preventDefault()` 的情况 -->
                    <div v-on:scroll.passive="onScroll">...</div>
                    这个 .passive 修饰符尤其能够提升移动端的性能。

                    不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。

                按键修饰符
                    在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：

                    <!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` -->
                    <input v-on:keyup.enter="submit">
                    你可以直接将 KeyboardEvent.key 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。

                    <input v-on:keyup.page-down="onPageDown">
                    在上述示例中，处理函数只会在 $event.key 等于 PageDown 时被调用。

                按键码
                    keyCode 的事件用法已经被废弃了并可能不会被最新的浏览器支持。

                    使用 keyCode 特性也是允许的：

                    <input v-on:keyup.13="submit">
                    为了在必要的情况下支持旧浏览器，Vue 提供了绝大多数常用的按键码的别名：

                    .enter
                    .tab
                    .delete (捕获“删除”和“退格”键)
                    .esc
                    .space
                    .up
                    .down
                    .left
                    .right
                    有一些按键 (.esc 以及所有的方向键) 在 IE9 中有不同的 key 值, 如果你想支持 IE9，这些内置的别名应该是首选。

                    你还可以通过全局 config.keyCodes 对象自定义按键修饰符别名：

                    // 可以使用 `v-on:keyup.f1`
                    Vue.config.keyCodes.f1 = 112
                系统修饰键
                    2.1.0 新增

                    可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。

                    .ctrl
                    .alt
                    .shift
                    .meta
                    注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta”。

                    例如：

                    <!-- Alt + C -->
                    <input @keyup.alt.67="clear">

                    <!-- Ctrl + Click -->
                    <div @click.ctrl="doSomething">Do something</div>
                    请注意修饰键与常规按键不同，在和 keyup 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 ctrl 的情况下释放其它按键，才能触发 keyup.ctrl。而单单释放 ctrl 也不会触发事件。如果你想要这样的行为，请为 ctrl 换用 keyCode：keyup.17。

                .exact 修饰符
                    2.5.0 新增

                    .exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。

                    <!-- 即使 Alt 或 Shift 被一同按下时也会触发 -->
                    <button @click.ctrl="onClick">A</button>

                    <!-- 有且只有 Ctrl 被按下的时候才触发 -->
                    <button @click.ctrl.exact="onCtrlClick">A</button>

                    <!-- 没有任何系统修饰符被按下的时候才触发 -->
                    <button @click.exact="onClick">A</button>
                鼠标按钮修饰符
                    2.2.0 新增

                    .left
                    .right
                    .middle
                    这些修饰符会限制处理函数仅响应特定的鼠标按钮。
            v-model
                获取和设置表单元素的值（双向数据绑定）
                    <div id="app">
                        <input type="text" v-model="message"/>
                    </div>

                    var app=new Vue({
                        el:"#app",
                        data:{
                            message:"暨南大学"
                        }
                        methods:{
                            
                        }

                    })

    网络应用
        网络请求库(axios)
            导包
                <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
            get请求
                axios.get(地址?key=value&key2=value2).then(function(response){},function(err){})
            post请求
                axios.post(地址,{key:value,key2:value2}).then(function(response){},function(err){})
            2个接口
                  /*
                    接口1:随机笑话
                    请求地址:https://autumnfish.cn/api/joke/list
                    请求方法:get
                    请求参数:num(笑话条数,数字)
                    响应内容:随机笑话
                */
                document.querySelector(".get").onclick = function () {
                    axios.get("https://autumnfish.cn/api/joke/list?num=6")
                    // axios.get("https://autumnfish.cn/api/joke/list1234?num=6")
                    .then(function (response) {
                        console.log(response);
                    },function(err){
                        console.log(err);
                    })
                }
                /*
                    接口2:用户注册
                    请求地址:https://autumnfish.cn/api/user/reg
                    请求方法:post
                    请求参数:username(用户名,字符串)
                    响应内容:注册成功或失败
                */
                    document.querySelector(".post").onclick = function () {
                        axios.post("https://autumnfish.cn/api/user/reg",{username:"盐焗西兰花"})
                        .then(function(response){
                            console.log(response);
                            console.log(this.skill);
                        },function (err) {
                            console.log(err);
                        })
                    }
        axios+vue
            axios如何结合vue开发网络应用
                var app=new Vue({
                    el:"#app",
                    data:{
                        joke:"讲个笑话"
                    }
                    methods:{
                        getjoke:function(){
                            axios.get(地址).then(function(response){

                            },function(err){
                                
                            })
                        }
                    }
                })