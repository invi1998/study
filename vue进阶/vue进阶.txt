vue进阶
    $emit和$on
        $emit和$on主要解决事件的定义和消费，使用this.$on方法来定义一个事件和指定时间的执行对象或者说执行函数，
        this.$on('my_events',this.handleEvents)
        使用this.$emit来消费使用这个事件
        this.$emit('my_events','my_params')//前面是定义的事件，后面是传递的参数内容
        使用这种方法最大的好处是将事件的定义和事件的消费进行分开，实现逻辑的解耦，可以在子组件当中直接调用事件，非常的灵活和方便。
        通过源码分析可以看出一个on方法是可以赋值多个处理函数的，同时可以为一个事件绑定多个处理方法。
        因为emit源码里对异常进行了try-catch处理，所以当emit里出现异常时并不会中断程序的运行。
        $on源码
        Vue.prototype.$on = function (event, fn) {
        const hookRE = /^hook:/    //检测自定义事件名是否是hook:开头
        const vm = this     //将vue的实例this传递给vm
        if (Array.isArray(event)) {  // 如果第一个参数是数组，通过递归循环的方式进行赋值
            for (let i = 0; i < event.length; i++) {
            this.$on(event[i], fn)  // 递归
            }
        } else {//如果不是数组
            (vm._events[event] || (vm._events[event] = [])).push(fn)
            // 如果有对应事件名就push，没有创建为空数组然后push
            if (hookRE.test(event)) {  // 如果是hook:开头
            vm._hasHookEvent = true  // 标志位为true
            }
        }
        return vm
        }
        $emit源码
        Vue.prototype.$emit = function (event) {
        const vm = this
        let cbs = vm._events[event]  // 找到事件名对应的回调集合
        if (cbs) {
            const args = toArray(arguments, 1)  // 将附加参数转为数组
            
            for (let i = 0; i < cbs.length; i++) {
            cbs[i].apply(vm, args)  // 挨个执行对应的回调集合
            }
        }
        return vm
        }
    directive用法
        Vue.directive( id, [definition] )
        参数：
        {string} id
        {Function | Object} [definition]
        用法：
            注册或获取全局指令。
            // 注册
            Vue.directive('my-directive', {
                //指令定义函数提供了几个钩子函数（可选）：
                bind: function () {}, //只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。
                inserted: function () {}, // 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。
                update: function () {},//被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。
                componentUpdated: function () {},//被绑定元素所在模板完成一次更新周期时调用。
                unbind: function () {}//只调用一次， 指令与元素解绑时调用。
            })
            // 注册 (指令函数)
            Vue.directive('my-directive', function () {
            // 这里将会被 `bind` 和 `update` 调用
            })
            // getter，返回已注册的指令
            var myDirective = Vue.directive('my-directive')
    Vue.component用法
        Vue.component( id, [definition] )
        参数：
            {string} id
            {Function | Object} [definition]
        用法：
            注册或获取全局组件。注册还会自动使用给定的 id 设置组件的名称
        // 注册组件，传入一个扩展过的构造器
            Vue.component('my-component', Vue.extend({ /* ... */ }))
        // 注册组件，传入一个选项对象 (自动调用 Vue.extend)
            Vue.component('my-component', { /* ... */ })
        // 获取注册的组件 (始终返回构造器)
            var MyComponent = Vue.component('my-component')
    Vue.extend( options )
        参数：
            {Object} options
        用法：
            使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。
            data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数
            <div id="mount-point"></div>
            // 创建构造器
            var Profile = Vue.extend({
            template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',
                data: function () {
                    return {
                    firstName: 'Walter',
                    lastName: 'White',
                    alias: 'Heisenberg'
                    }
                }
            })
            // 创建 Profile 实例，并挂载到一个元素上。
            new Profile().$mount('#mount-point')
            结果如下：
            <p>Walter White aka Heisenberg</p>    